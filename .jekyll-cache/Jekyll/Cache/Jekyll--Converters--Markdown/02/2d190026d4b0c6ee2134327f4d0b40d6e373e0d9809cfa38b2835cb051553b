I"r<hr />

<html>
    <head>
    <script language="javascript" type="text/javascript" src=" /assets/p5_libraries/p5.js"></script>
    <script language="javascript" type="text/javascript" src="/assets/p5_libraries/p5.dom.js"></script>
    <script language="javascript" type="text/javascript" src="/assets/p5_libraries/p5.sound.js"></script>
</head>


</html>

<script src="/assets/js/p5_bubbles_sketch_small.js"> </script>

<canvas id="c" width="600" height="400"></canvas>

<script type="importmap">{
	"imports": {
		"three": "https://threejs.org/build/three.module.js"
	}
}</script>
<!-- Remove this when import maps will be widely supported -->
<script async="" src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>

<!-- <script language="javascript" type="text/javascript" src="sketch.js"></script> -->
<script type="module">


import * as THREE from 'three';

function main() {
  const canvas = document.querySelector('#c');
  const renderer = new THREE.WebGLRenderer({canvas});

  var can = document.querySelector('canvas');
  can.style.position = 'absolute';
  can.style.top = "150px";
  can.style.left = "200px";

  const fov = 75;
  const aspect = 2;  // the canvas default
  const near = 0.1;
  const far = 5;
  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
  camera.position.z = 2;

  const scene = new THREE.Scene();

  const boxWidth = 1;
  const boxHeight = 1;
  const boxDepth = 1;
  const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);

  const cubes = [];  // just an array we can use to rotate the cubes
  const loader = new THREE.TextureLoader();
renderer.setClearColor( 0xffffff, 0);

  const material = new THREE.MeshBasicMaterial({
    map: loader.load('https://rodolfoacostacastro.github.io/assets/images/pollo.png'),
  });
  const cube = new THREE.Mesh(geometry, material);
  scene.add(cube);
  cubes.push(cube);  // add to our list of cubes to rotate

  function resizeRendererToDisplaySize(renderer) {
    const canvas = renderer.domElement;
    const width = canvas.clientWidth;
    const height = canvas.clientHeight;
    const needResize = canvas.width !== width || canvas.height !== height;
    if (needResize) {
      renderer.setSize(width, height, false);
    }
    return needResize;
  }

  function render(time) {
    time *= 0.001;

    if (resizeRendererToDisplaySize(renderer)) {
      const canvas = renderer.domElement;
      camera.aspect = canvas.clientWidth / canvas.clientHeight;
      camera.updateProjectionMatrix();
    }

    cubes.forEach((cube, ndx) => {
      const speed = .2 + ndx * .1;
      const rot = time * speed;
      cube.rotation.x = rot;
      cube.rotation.y = rot;
    });

    renderer.render(scene, camera);

    requestAnimationFrame(render);
  }

  requestAnimationFrame(render);
}

main();






</script>

<p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
<br /><br /><br /><br /><br /><br /></p>

<p>_Hola Rodolfito: Esto sí que lo puedo cambiar You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p> 
<img src="/assets/images/pollo.png" alt="" />  
<span class="caption" style="color:grey; font-style: italic"></span> <img src="/assets/images/pollo.png" alt="" />  
<span class="caption" style="color:grey; font-style: italic"></span> <img src="/assets/images/pollo.png" alt="" />  
<span class="caption" style="color:grey; font-style: italic"></span> </p>

<p> 
![Mi pollo](/assets/images/pollo.png), ![Mi pollo](/assets/images/pollo.png), ![Mi pollo](/assets/images/pollo.png)
![Mi pollo](/assets/images/pollo.png), ![Mi pollo](/assets/images/pollo.png), ![Mi pollo](/assets/images/pollo.png) </p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>

<p><img src="/assets/images/pollo.png" alt="This is not a chicken" /><br />
<span class="caption" style="color:grey; font-style: italic">This is not a chicken</span></p>

<div class="spacing youtube">
  <iframe width="708" height="416.250" src="https://www.youtube.com/embed/SnrEVlJH8GY" frameborder="0" allowfullscreen=""></iframe>
</div>
<p><span class="caption" style="color:grey; font-style: italic">Meine Oma fährt Motorrad</span></p>

<p><a href="futurevillage.org">This is not a link</a></p>

<div class="alert alert-info" role="alert">
<i class="fa fa-info-circle"></i> <b>Note:</b>
This is not a sample note.
</div>

:ET